import datetime
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from . import db

# Generated by ChatGPT and modified from the types used in DBdiagrams for the 
# ER Diagrams

class User(UserMixin, db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255), unique=True, nullable=False)
    first_name = db.Column(db.String(100), nullable=False)
    last_name = db.Column(db.String(100), nullable=False)
    password = db.Column(db.String(255), nullable=False)
    phone_number = db.Column(db.String(20))
    join_date = db.Column(db.DateTime(), nullable=False, default=datetime.datetime.now)
    last_login = db.Column(db.DateTime(), nullable=False, default=datetime.datetime.now)
    
    saved_items = db.relationship("UserItemSaved", backref="user", lazy="dynamic")
    comments = db.relationship('Comment', backref='user', lazy="dynamic")
    items = db.relationship('Item', backref='user', lazy="dynamic")
    address = db.relationship('Address', backref='user', uselist=False)
    bids = db.relationship('Bid', backref='user', lazy="dynamic")

    def __init__(self, email, first_name, last_name, password) -> None:
        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.password = password

    def set_password(self, password):
        self.password = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password, password)


class Address(db.Model):
    __tablename__ = 'address'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), unique=True, nullable=False)
    state_id = db.Column(db.Integer, db.ForeignKey('state.id'))
    address = db.Column(db.String(255), nullable=False)
    city_id = db.Column(db.Integer, db.ForeignKey('city.id'))

    def __init__(self, address, city_id) -> None:
        self.address = address
        self.city_id = city_id

class State(db.Model):
    __tablename__ = 'state'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)

    # cities = db.relationship('City', backref='state', lazy="dynamic")

class City(db.Model):
    __tablename__ = 'city'
    id = db.Column(db.Integer, primary_key=True)
    state_id = db.Column(db.Integer, db.ForeignKey('state.id'))
    name = db.Column(db.String(100), unique=True, nullable=False)

    state = db.relationship('State', backref='cities', uselist=False)

class Category(db.Model):
    __tablename__ = 'category'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)

    items = db.relationship('Item', backref='category', lazy="dynamic")

class Item(db.Model):
    __tablename__ = 'item'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    city_id = db.Column(db.Integer, db.ForeignKey('city.id'))
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'))
    item_auction_id = db.Column(db.Integer, db.ForeignKey('item_auction.id'))
    title = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    used = db.Column(db.Boolean, nullable=False, default=False)
    create_time = db.Column(db.DateTime(), nullable=False, default=datetime.datetime.now)
    price = db.Column(db.Float, nullable=False, default=0.0)

    # photos = db.relationship('Photo', backref='item', lazy="dynamic")
    photos = db.relationship('Photo', backref='item')
    comments = db.relationship('Comment', backref='item', lazy="dynamic")
    item_auction = db.relationship('ItemAuction', backref='item', uselist=False)
    saved_users = db.relationship('UserItemSaved', backref='item', lazy="dynamic")
    city = db.relationship('City', backref='items', uselist=False)
    # bids = db.relationship('Bid', backref='item', lazy="dynamic")

    thumb_photo_url=None
    posted_date=None

    def __init__(self, title, user_id, city_id, category_id, description, used, price=None) -> None:
        self.title = title
        self.user_id = user_id
        self.city_id = city_id
        self.category_id = category_id
        self.description = description
        self.used = used
        self.price = price

class ItemAuction(db.Model):
    __tablename__ = 'item_auction'
    id = db.Column(db.Integer, primary_key=True)
    current_bid_id = db.Column(db.Integer, db.ForeignKey('bid.id'), unique=True, nullable=True)
    start_price = db.Column(db.Float)
    current_price = db.Column(db.Float)
    end_time = db.Column(db.DateTime())

    current_bid = db.relationship('Bid', uselist=False, foreign_keys=[current_bid_id])
    bids = db.relationship('Bid', backref='item_auction', lazy="dynamic", foreign_keys="Bid.item_auction_id")
    # bids = db.relationship('Bid', back_populates='item_auction', lazy="dynamic")

class Bid(db.Model):
    __tablename__ = 'bid'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    item_auction_id = db.Column(db.Integer, db.ForeignKey('item_auction.id'))
    price = db.Column(db.Float)
    time = db.Column(db.DateTime(), nullable=False, default=datetime.datetime.now)

    # item_auction = db.relationship('ItemAuction', back_populates='bids')

class Comment(db.Model):
    __tablename__ = 'comment'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    item_id = db.Column(db.Integer, db.ForeignKey('item.id'))
    create_time = db.Column(db.DateTime(), nullable=False, default=datetime.datetime.now)
    description = db.Column(db.String(255))

class Photo(db.Model):
    __tablename__ = 'photo'
    id = db.Column(db.Integer, primary_key=True)
    item_id = db.Column(db.Integer, db.ForeignKey('item.id'))
    original_name = db.Column(db.String(255))
    extension = db.Column(db.String(10))

    photo_file=None
    photo_url=None

    def __init__(self, original_name, extension, photo_file) -> None:
        self.original_name = original_name
        self.extension = extension
        self.photo_file = photo_file

class UserItemSaved(db.Model):
    __tablename__ = 'user_item_saved'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    saved_id = db.Column(db.Integer, db.ForeignKey('item.id'))
    create_time = db.Column(db.DateTime(), nullable=False, default=datetime.datetime.now)